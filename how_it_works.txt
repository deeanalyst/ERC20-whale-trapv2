# Understanding Your ERC20 Whale Trap System

This document explains how the different parts of your Drosera trap work together. The system is designed to be secure, efficient, and decentralized.

### The Core Components

There are three main parts to your setup:

1.  **The Trap Contract (`ERC20WhaleTrap.sol`)**: The "Rule Book"
2.  **The Response Contract (`ERC20WhaleResponse.sol`)**: The "Action Taker"
3.  **The Drosera Operators**: The "Workers"

Let's break down each part.

---

### 1. The Trap Contract (`ERC20WhaleTrap.sol`) - The On-Chain Rule Book

This contract's only job is to define the *rules* for what constitutes a "whale event." It sits passively on the blockchain and doesn't do anything on its own.

*   **`collect()` function**: This is a simple, read-only function. When called, it just reads two pieces of information from the blockchain:
    1.  The ERC20 token balance of the whale address you are tracking.
    2.  The current price of that token from a Chainlink price feed.
    It then bundles this data and returns it. Because it's a `view` function, calling it is extremely cheap (it doesn't cost gas to read data).

*   **`shouldRespond()` function**: This is the core logic. The Drosera network calls this function with data collected from two different points in time (e.g., from two different blocks). The function then:
    1.  Calculates the difference between the old and new token balances.
    2.  Calculates the difference between the old and new prices.
    3.  Checks if **both** of these differences are greater than the `BALANCE_THRESHOLD` and `PRICE_THRESHOLD` you set.
    4.  If both conditions are true, it returns `true`. Otherwise, it returns `false`.

This contract is powerful because it's just a set of instructions. All the heavy lifting is done by the operators.

---

### 2. The Response Contract (`ERC20WhaleResponse.sol`) - The Action Taker

This contract is completely separate from the trap. Its purpose is to perform an action *only when the trap is triggered*.

*   **`respondWithERC20Context()` function**: This is the function the Drosera network calls when `shouldRespond()` returns `true`. In your case, its only job is to emit a `WhaleEventTriggered` event. This logs all the relevant data (old/new balances and prices) on the blockchain for anyone to see.
*   **Decoupled Design**: The trap contract has no knowledge of this response contract. This is a key security feature. The connection is made in your `drosera.toml` file, not in the code, making the system modular and flexible.

---

### 3. The Drosera Operators - The Off-Chain Workers

This is the magic of the Drosera network. The operators are a decentralized network of computers that are constantly monitoring the blockchain.

*   **Off-Chain Monitoring**: The operators run software that continuously calls the `collect()` function on your trap contract. They do this **off-chain**, meaning they use their own resources and you don't pay any gas for this constant monitoring.
*   **Executing the Logic**: The operators take the data they collect and run the `shouldRespond()` logic.
*   **Triggering the Response**: If an operator sees that `shouldRespond()` returns `true`, it takes on the responsibility of sending a transaction to the blockchain. This transaction calls the `respondWithERC20Context()` function on your response contract, paying the gas fee to do so. The operators are incentivized by the Drosera network to do this work reliably.

### The Glue: `drosera.toml`

This configuration file is what ties everything together. It tells the Drosera operators:
*   **Which trap to watch**: `path = "out/ERC20WhaleTrap.sol/ERC20WhaleTrap.json"`
*   **Which contract to call if the trap triggers**: `response_contract = "0x..."`
*   **Which function to execute on that contract**: `response_function = "respondWithERC20Context(...)"`

By keeping this configuration separate, you can change your response action in the future without ever having to redeploy your trap contract.
